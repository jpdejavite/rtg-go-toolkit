// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/config/globalconfig.go

// Package mock_config is a generated GoMock package.
package mock_config

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIGlobalConfigs is a mock of IGlobalConfigs interface
type MockIGlobalConfigs struct {
	ctrl     *gomock.Controller
	recorder *MockIGlobalConfigsMockRecorder
}

// MockIGlobalConfigsMockRecorder is the mock recorder for MockIGlobalConfigs
type MockIGlobalConfigsMockRecorder struct {
	mock *MockIGlobalConfigs
}

// NewMockIGlobalConfigs creates a new mock instance
func NewMockIGlobalConfigs(ctrl *gomock.Controller) *MockIGlobalConfigs {
	mock := &MockIGlobalConfigs{ctrl: ctrl}
	mock.recorder = &MockIGlobalConfigsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIGlobalConfigs) EXPECT() *MockIGlobalConfigsMockRecorder {
	return m.recorder
}

// GetGlobalKeys mocks base method
func (m *MockIGlobalConfigs) GetGlobalKeys() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalKeys")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetGlobalKeys indicates an expected call of GetGlobalKeys
func (mr *MockIGlobalConfigsMockRecorder) GetGlobalKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalKeys", reflect.TypeOf((*MockIGlobalConfigs)(nil).GetGlobalKeys))
}

// LoadGlobalConfig mocks base method
func (m *MockIGlobalConfigs) LoadGlobalConfig() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadGlobalConfig")
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadGlobalConfig indicates an expected call of LoadGlobalConfig
func (mr *MockIGlobalConfigsMockRecorder) LoadGlobalConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadGlobalConfig", reflect.TypeOf((*MockIGlobalConfigs)(nil).LoadGlobalConfig))
}

// GetGlobalConfigAsInt mocks base method
func (m *MockIGlobalConfigs) GetGlobalConfigAsInt(key string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalConfigAsInt", key)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetGlobalConfigAsInt indicates an expected call of GetGlobalConfigAsInt
func (mr *MockIGlobalConfigsMockRecorder) GetGlobalConfigAsInt(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalConfigAsInt", reflect.TypeOf((*MockIGlobalConfigs)(nil).GetGlobalConfigAsInt), key)
}

// GetGlobalConfigAsInt64 mocks base method
func (m *MockIGlobalConfigs) GetGlobalConfigAsInt64(key string) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalConfigAsInt64", key)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetGlobalConfigAsInt64 indicates an expected call of GetGlobalConfigAsInt64
func (mr *MockIGlobalConfigsMockRecorder) GetGlobalConfigAsInt64(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalConfigAsInt64", reflect.TypeOf((*MockIGlobalConfigs)(nil).GetGlobalConfigAsInt64), key)
}

// GetGlobalConfigAsStr mocks base method
func (m *MockIGlobalConfigs) GetGlobalConfigAsStr(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalConfigAsStr", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetGlobalConfigAsStr indicates an expected call of GetGlobalConfigAsStr
func (mr *MockIGlobalConfigsMockRecorder) GetGlobalConfigAsStr(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalConfigAsStr", reflect.TypeOf((*MockIGlobalConfigs)(nil).GetGlobalConfigAsStr), key)
}
